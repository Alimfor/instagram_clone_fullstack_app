version: '3.4'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    networks:
      - app_net

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app_net

  mongodb:
    image: mongo
    container_name: mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mongousr
      - MONGO_INITDB_ROOT_PASSWORD=mongopwd
    volumes:
      - ../db/mongo:/data/db
    ports:
      - "27017:27017"
    healthcheck:
      test: "echo 'db.runCommand(\"ping\").ok' | mongosh mongodb:27017/test --quiet"
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - mongo_network
      - app_net

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=mongousr
      - ME_CONFIG_MONGODB_ADMINPASSWORD=mongopwd
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_OPTIONS_EDITORTHEME=dark
    ports:
      - "8081:8081"
    depends_on:
      mongodb:
        condition: service_healthy
    restart: on-failure
    networks:
      - mongo_network

  mongodb-exporter:
    image: bitnami/mongodb-exporter:0.40.0
    container_name: mongodb-exporter
    environment:
      - MONGODB_URI=mongodb://mongousr:mongopwd@mongo:27017/admin
    ports:
      - "9216:9216"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - mongo_network
      - app_net

  neo4j:
    image: neo4j:5.18.1
    container_name: neo4j
    ports:
      - "7687:7687"
      - "7474:7474"
    networks:
      - app_net

  redis:
    image: redis:7.2.4
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - ../db/redis:/data
    networks:
      - app_net

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.8.0
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    restart: unless-stopped
    environment:
      discovery.type: single-node
    networks:
      - app_net

  logstash:
      image: docker.elastic.co/logstash/logstash:7.8.0
      container_name: logstash
      ports:
        - "5009:5009"
      volumes:
        - ./pipeline:/usr/share/logstash/pipeline
      networks:
        - app_net

  kibana:
    image: docker.elastic.co/kibana/kibana:7.8.0
    container_name: kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - app_net

  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app_net

  grafana:
    image: grafana/grafana:10.1.9
    container_name: grafana
    ports:
      - "3001:3000"
    volumes:
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    networks:
      - app_net

  zipkin:
    image: openzipkin/zipkin:3
    container_name: zipkin
    ports:
      - "9411:9411"

  discovery-server:
    image: alimfor/micro-discovery-service:0.0.1
    container_name: discovery
    ports:
      - "8761:8761"
    healthcheck:
      test: "curl -fs http://localhost:8761/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app_net

  config-server:
    image: alimfor/micro-config-service:0.0.1
    container_name: config
    ports:
      - "8888:8888"
    healthcheck:
      test: "curl -fs http://localhost:8888/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 3
    extends:
      file: common-config.yml
      service: microservice-base-config

  auth:
    image: alimfor/micro-auth-service:0.0.1
    container_name: auth
    ports:
      - "9000:9000"
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
    healthcheck:
      test: "curl -fs http://localhost:9000/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 3
    environment:
      SPRING_APPLICATION_NAME: auth-service
      SPRING_PROFILES_ACTIVE: jwt, kafka, mongo, service-details
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: kafka:9092
      SPRING_DATA_MONGODB_HOST: mongodb
    extends:
      file: common-config.yml
      service: microservice-discovery-config

  media:
    image: alimfor/micro-media-service:0.0.1
    container_name: media
    ports:
      - "8000:8000"
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
    healthcheck:
      test: "curl -fs http://localhost:8000/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 3
    command: sh -c "mkdir -p /Backend/insta-clone-media-service-images"
    environment:
      FILE_UPLOAD-DIR: /Backend/insta-clone-media-service-images
      SPRING_DATA_MONGODB_HOST: mongodb
    extends:
      file: common-config.yml
      service: microservice-discovery-config

  post:
    image: alimfor/micro-post-service:0.0.1
    container_name: post
    ports:
      - "8001:8001"
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
    healthcheck:
      test: "curl -fs http://localhost:8001/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: kafka:9092
      SPRING_DATA_MONGODB_HOST: mongodb
    extends:
      file: common-config.yml
      service: microservice-discovery-config

  graph:
    image: alimfor/micro-graph-service:0.0.1
    container_name: graph
    ports:
      - "8082:8082"
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
    healthcheck:
      test: "curl -fs http://localhost:8082/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: kafka:9092
      SPRING_NEO4J_URI: bolt://neo4j:7687
    extends:
      file: common-config.yml
      service: microservice-discovery-config

  feed:
    image: alimfor/micro-feed-service:0.0.1
    container_name: feed
    ports:
      - "8003:8003"
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
    healthcheck:
      test: "curl -fs http://localhost:8003/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      SPRING_DATA_REDIS_HOST: redis
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: kafka:9092
    extends:
      file: common-config.yml
      service: microservice-discovery-config

  api-gateway:
    image: alimfor/micro-api-gateway:0.0.1
    container_name: api-gateway
    ports:
      - "8765:8765"
    depends_on:
      auth:
        condition: service_healthy
      media:
        condition: service_healthy
      post:
        condition: service_healthy
      graph:
        condition: service_healthy
      feed:
        condition: service_healthy
    healthcheck:
      test: "curl -fs http://localhost:8765/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      EUREKA_CLIENT_SERVICE-URL_DEFAULTZONE: http://discovery-server:8761/eureka/
      SPRING_CLOUD_GATEWAY_GLOBALCORS_CORS-CONFIGURATIONS_0: '[/**]: allowed-origins: http://front:3000'
    extends:
      file: common-config.yml
      service: microservice-configserver-config

networks:
  mongo_network:
    driver: bridge
  app_net:
    driver: bridge